<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chenyx的博客</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://sophiechenyx.github.io/blog/"/>
  <updated>2018-03-23T07:46:49.462Z</updated>
  <id>https://sophiechenyx.github.io/blog/</id>
  
  <author>
    <name>Chenyx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tag测试页面</title>
    <link href="https://sophiechenyx.github.io/blog/2018/03/23/tag%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/"/>
    <id>https://sophiechenyx.github.io/blog/2018/03/23/tag测试页面/</id>
    <published>2018-03-23T07:08:33.000Z</published>
    <updated>2018-03-23T07:46:49.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我是用来测试tags的页面"><a href="#我是用来测试tags的页面" class="headerlink" title="我是用来测试tags的页面"></a>我是用来测试tags的页面</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;我是用来测试tags的页面&quot;&gt;&lt;a href=&quot;#我是用来测试tags的页面&quot; class=&quot;headerlink&quot; title=&quot;我是用来测试tags的页面&quot;&gt;&lt;/a&gt;我是用来测试tags的页面&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>快速抠图</title>
    <link href="https://sophiechenyx.github.io/blog/2018/03/23/%E5%BF%AB%E9%80%9F%E6%8A%A0%E5%9B%BE/"/>
    <id>https://sophiechenyx.github.io/blog/2018/03/23/快速抠图/</id>
    <published>2018-03-23T06:49:36.000Z</published>
    <updated>2018-03-23T06:49:36.376Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP状态码的解读</title>
    <link href="https://sophiechenyx.github.io/blog/2018/03/23/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E7%9A%84%E8%A7%A3%E8%AF%BB/"/>
    <id>https://sophiechenyx.github.io/blog/2018/03/23/HTTP状态码的解读/</id>
    <published>2018-03-23T06:44:11.000Z</published>
    <updated>2018-03-28T07:03:47.605Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP状态码是用以表示服务器HTTP响应状态的3位数字代码"><a href="#HTTP状态码是用以表示服务器HTTP响应状态的3位数字代码" class="headerlink" title="HTTP状态码是用以表示服务器HTTP响应状态的3位数字代码"></a>HTTP状态码是用以表示服务器HTTP响应状态的3位数字代码</h3><h2 id="常见的HTTP状态码报错问题"><a href="#常见的HTTP状态码报错问题" class="headerlink" title="常见的HTTP状态码报错问题"></a>常见的HTTP状态码报错问题</h2><ul><li>2开头 （请求成功）表示成功处理了请求的状态代码。<ul><li>200   （成功）  服务器已成功处理了请求。 通常，这表示###服务器提供了请求的网页。 </li><li>201   （已创建）  请求成功并且服务器创建了新的资源。 </li><li>202   （已接受）  服务器已接受请求，但尚未处理。 </li><li>203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。 </li><li>204   （无内容）  服务器成功处理了请求，但没有返回任何内容。 </li><li>205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。</li><li>206   （部分内容）  服务器成功处理了部分 GET 请求。<a id="more"></a></li></ul></li><li>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。<ul><li>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 </li><li>301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。    </li><li>302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</li><li>304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 </li><li>305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。 </li><li>307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTTP状态码是用以表示服务器HTTP响应状态的3位数字代码&quot;&gt;&lt;a href=&quot;#HTTP状态码是用以表示服务器HTTP响应状态的3位数字代码&quot; class=&quot;headerlink&quot; title=&quot;HTTP状态码是用以表示服务器HTTP响应状态的3位数字代码&quot;&gt;&lt;/a&gt;HTTP状态码是用以表示服务器HTTP响应状态的3位数字代码&lt;/h3&gt;&lt;h2 id=&quot;常见的HTTP状态码报错问题&quot;&gt;&lt;a href=&quot;#常见的HTTP状态码报错问题&quot; class=&quot;headerlink&quot; title=&quot;常见的HTTP状态码报错问题&quot;&gt;&lt;/a&gt;常见的HTTP状态码报错问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2开头 （请求成功）表示成功处理了请求的状态代码。&lt;ul&gt;
&lt;li&gt;200   （成功）  服务器已成功处理了请求。 通常，这表示###服务器提供了请求的网页。 &lt;/li&gt;
&lt;li&gt;201   （已创建）  请求成功并且服务器创建了新的资源。 &lt;/li&gt;
&lt;li&gt;202   （已接受）  服务器已接受请求，但尚未处理。 &lt;/li&gt;
&lt;li&gt;203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。 &lt;/li&gt;
&lt;li&gt;204   （无内容）  服务器成功处理了请求，但没有返回任何内容。 &lt;/li&gt;
&lt;li&gt;205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。&lt;/li&gt;
&lt;li&gt;206   （部分内容）  服务器成功处理了部分 GET 请求。
    
    </summary>
    
      <category term="前端杂货铺" scheme="https://sophiechenyx.github.io/blog/categories/grocery/"/>
    
    
      <category term="HTTP状态码" scheme="https://sophiechenyx.github.io/blog/tags/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ps</title>
    <link href="https://sophiechenyx.github.io/blog/2018/03/22/ps/"/>
    <id>https://sophiechenyx.github.io/blog/2018/03/22/ps/</id>
    <published>2018-03-22T07:27:02.000Z</published>
    <updated>2018-03-23T03:44:46.119Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>title</title>
    <link href="https://sophiechenyx.github.io/blog/2018/03/22/title/"/>
    <id>https://sophiechenyx.github.io/blog/2018/03/22/title/</id>
    <published>2018-03-22T06:43:41.000Z</published>
    <updated>2018-03-22T07:20:51.953Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack简易打包教程</title>
    <link href="https://sophiechenyx.github.io/blog/2018/03/19/webpack%E7%AE%80%E6%98%93%E6%89%93%E5%8C%85%E6%95%99%E7%A8%8B/"/>
    <id>https://sophiechenyx.github.io/blog/2018/03/19/webpack简易打包教程/</id>
    <published>2018-03-19T13:28:37.000Z</published>
    <updated>2018-03-28T07:28:11.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack的简易打包教程"><a href="#webpack的简易打包教程" class="headerlink" title="webpack的简易打包教程"></a>webpack的简易打包教程</h2><p>不同的js没有经过webpack相关的打包是不识别的；<br>webpack可以对 .js  .png   .css 静态关系进行一个依赖的集合；<br>例如typescript这种在javascript基础上开发的语言使我们能够实现目前版本的javascript不能直接使用的特性，<br>并且之后还能转换为javascript,使得jacascript文件使浏览器可以识别；<br>webpack是模块打包机，分析项目结构，找到找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），<br>并将其转换和打包为合适的格式供浏览器使用。 </p><a id="more"></a><p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），<br>Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p><h3 id="一个基础项目的相关webpack-config-js文件的配置"><a href="#一个基础项目的相关webpack-config-js文件的配置" class="headerlink" title="一个基础项目的相关webpack.config.js文件的配置"></a>一个基础项目的相关webpack.config.js文件的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">本项目的基础的webpack.config.js配置文件;</span><br><span class="line">var webpack = require(&apos;webpack&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  context:path.resolve(__dirname,&apos;src&apos;),</span><br><span class="line">  entry:&#123;</span><br><span class="line">    main:&apos;./main&apos;,</span><br><span class="line">    login:&apos;./modules/login&apos;,</span><br><span class="line">    product:&apos;./modules/product&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test: /\.js$/, </span><br><span class="line">        loader: &apos;babel-loader&apos;, </span><br><span class="line">        query:&#123;presets:[&apos;es2015&apos;]&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:/\.css$/,</span><br><span class="line">        loader:&apos;style-loader!css-loader&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;test:/\.(png|jpg)$/,loader:&apos;url-loader?limit=8192&apos;&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">      new webpack.HotModuleReplacementPlugin()</span><br><span class="line">    ],</span><br><span class="line">  devServer:&#123;</span><br><span class="line">    contentBase: path.join(__dirname, &apos;dist&apos;),</span><br><span class="line">    compress: false,</span><br><span class="line">    inline: true,</span><br><span class="line">    port: 8080,</span><br><span class="line">    hot:true</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">      extensions:  [&apos;.js&apos;,&apos;.vue&apos;] </span><br><span class="line">    &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path:path.join(__dirname,&apos;dist&apos;),</span><br><span class="line">    publicPath:&apos;/&apos;,</span><br><span class="line">    filename: &apos;[name]-[hash:8].js&apos;,</span><br><span class="line">    chunkFilename:&apos;[id]-[chunkhash].js&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这里只存在入口文件和输出文件，使用了babel-loader加载器,在这里的module定义了对模块的处理逻辑，</span><br><span class="line">这里可以用loaders定义了一系列的加载器，以及一些正则。当需要加载的文件匹配test的正则时，就会调用后面的loader对文件进行处理，</span><br><span class="line">这正是webpack强大的原因。</span><br></pre></td></tr></table></figure><h2 id="让我们来开始做这样的一个小demo吧"><a href="#让我们来开始做这样的一个小demo吧" class="headerlink" title="让我们来开始做这样的一个小demo吧"></a>让我们来开始做这样的一个小demo吧</h2><ul><li>node webpack 的准备工作npm已经相关工具的安装网上一大堆就不解释了，我的项目中所用的版本如下：<ul><li>webpack 版本：4.2.0</li><li>node 版本：8.9.1</li><li>npm 版本：5.5.1</li></ul></li></ul><ul><li><p>1.npm初始化生成一个package.json 文件<br><code>npm init</code></p></li><li><p>2.创建基本的项目的目录结构，用来放置对应的文件</p><blockquote><p>|-src<br>| |-main.js<br>| |-assets<br>| | |-css<br>| | |-img<br>|-webpack.config.js<br>|-package.json<br>|-README.md  </p></blockquote></li></ul><ul><li>3.安装webpack；</li></ul><p>npm install webpack  –save-dev  //局部安装（安装后会生成一个package-lock.json这个是锁定安装时的版本号，并且需要上传到git，确保在他人安装的依赖的时候大家的依赖版本能够保持一致）<br>npm install webpack  -g –save-dev //全局安装</p><h4 id="安装成功之后检查当前的webpack的版本，显示正确的版本后表示webpack安装成功，现在开始进行webpack-config-js文件的基础配置；"><a href="#安装成功之后检查当前的webpack的版本，显示正确的版本后表示webpack安装成功，现在开始进行webpack-config-js文件的基础配置；" class="headerlink" title="安装成功之后检查当前的webpack的版本，显示正确的版本后表示webpack安装成功，现在开始进行webpack.config.js文件的基础配置；"></a>安装成功之后检查当前的webpack的版本，显示正确的版本后表示webpack安装成功，现在开始进行webpack.config.js文件的基础配置；</h4><blockquote><p>module.exports = {<br>      entry:’./src/main.js’,<br>      output:{<br>            filename:’./dist/bundle.js’<br>      }<br>    }<br>此时就是一个基础的webpack.config.js配置文件，在命令行可以直接输入<code>$ webpack</code>来执行一个基础的对main.js文件的打包；<br>在没有全局安装webpack的时候，只需执行<code>$ node_modules/.bin/webpack</code>即可完成简单的打包命令操作。在这里使用的是webpack<br>本为4.2.0，会要求安装webpack-cli,出现如下提示<br>$ node_modules/.bin/webpack<br>The CLI moved into a separate package: webpack-cli.<br>Please install ‘webpack-cli’ in addition to webpack itself to use the CLI.<br>-&gt; When using npm: npm install webpack-cli -D<br>-&gt; When using yarn: yarn add webpack-cli -D  </p></blockquote><p>安装成功后命令行执行命令即可完成基础的打包过程，dist目录下生成bundle.js文件</p><ul><li>4.使用loader<ul><li>loader是比较核心的一块内容，他将各类静态资源通过loader转换成相应的模块<blockquote><p>module:{<br>rules:[{                                //loaders加载器<br>test: /.js$/,                     //匹配loaders所处理文件的文件扩展名的正则表达式<br>loader: ‘babel-loader’,            //loader的名称         query:{presets:[‘es2015’]}          //为loader提供的额外设置的选项<br>},<br>{test:/.css$/, loader:’style-loader!css-loader’},<br>{test:/.(png|jpg)$/,loader:’url-loader?limit=8192’}<br>]<br>}  </p></blockquote></li></ul></li></ul><p>安装以上的相关安装包，为别对.js，.css,image图片进行了处理；babel相关的使用可以使得一些es6进行到es5的转码；<br>如果没有安装相关的使用的话，那么没有相应的loader进行处理，就会报错；  </p><ul><li>5.添加css文件和img文件；<br>在<code>./src/assets/css</code>下新建style.css文件,<code>./src/assets/css</code>下加入图片文件，在<code>main.js</code>中分别引入两个文件</li></ul><p>main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;./assets/css/style.css&apos;);  </span><br><span class="line">var img = document.createElement(&apos;img&apos;)  </span><br><span class="line">let box = document.querySelector(&apos;.box&apos;)  </span><br><span class="line">img.src = require(&apos;./assets/img/chenyx.png&apos;)  </span><br><span class="line">box.appendChild(img)  </span><br><span class="line">&lt;/code&gt;</span><br></pre></td></tr></table></figure><p>style.css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;  </span><br><span class="line">width: 200px;  </span><br><span class="line">height: 200px;  </span><br><span class="line">background-color: pink;  </span><br><span class="line">box-shadow: 10px 10px 30px #ccc;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dist目录下的index.html页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index中的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>   </span><br><span class="line">  样式由.css文件添加   </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>6.安装webpack-dev-server,开启本地服务</li></ul><p><code>$ npm install webpack-dev-server --save-dev</code></p><blockquote><p>在module.exports 中添加如下配置：<br>devServer: {<br>    contentBase: path.join(__dirname, ‘dist’),<br>    compress: false,<br>    inline: true,<br>    port: 8080<br>}  </p></blockquote><p>运行<code>webpack-dev-server</code>即可开启本地服务，在对应的8080端口可以看到页面；<br>以上就基本完成了一个简单的webpack打包，并可以通过webpack-dev-server 开启本地服务进行一些调试；</p><h3 id="在此之外我们还可以在package-json-中生成webpack的运行脚本"><a href="#在此之外我们还可以在package-json-中生成webpack的运行脚本" class="headerlink" title="在此之外我们还可以在package.json 中生成webpack的运行脚本,"></a>在此之外我们还可以在package.json 中生成webpack的运行脚本,</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script"</span>:&#123;  </span><br><span class="line">  <span class="string">"start"</span>:<span class="string">"node_modules/.bin/webpack"</span>,  </span><br><span class="line">  <span class="string">"serve"</span>:<span class="string">"node_modules/.bin/webpack-dev-server"</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//这样的话我们就可以直接运行 npm run start 、npm run serve命令来进行</span></span><br></pre></td></tr></table></figure><h4 id="加入进程守护nodemon"><a href="#加入进程守护nodemon" class="headerlink" title="加入进程守护nodemon"></a>加入进程守护nodemon</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">"scripts"</span>: &#123;  </span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"nodemon --exec webpack -w webpack.config.js"</span>,  </span><br><span class="line">    <span class="string">"serve:watch"</span>: <span class="string">"nodemon  --exec webpack-dev-server -w webpack.config.js"</span>  </span><br><span class="line">  &#125;  </span><br><span class="line">  这里我们只需要监听webpack.config.js文件的变化，所以添加-w参数指定特定的目录或者文件</span><br><span class="line">nodemon 执行webpack  到指定的webpack.config.js文件中去</span><br></pre></td></tr></table></figure><h4 id="页面实时刷新Hot-Module-Replacement-HMR-热加载"><a href="#页面实时刷新Hot-Module-Replacement-HMR-热加载" class="headerlink" title="页面实时刷新Hot Module Replacement(HMR)热加载"></a>页面实时刷新Hot Module Replacement(HMR)热加载</h4><blockquote><p>module模块加入设置<br>devServer:{<br>    contentBase: path.join(__dirname, ‘dist’),<br>    compress: false,<br>    inline: true,<br>    port: 8080,<br>    hot:true<br>  }</p></blockquote><p>加入热更新插件</p><blockquote><p>plugins:[<br>  new webpack.HotModuleReplacementPlugin()<br>]  </p></blockquote><p>更多可以访问我的github项目地址：<a href="https://github.com/sophieChenyx/webpack-for-Novice" target="_blank" rel="noopener">https://github.com/sophieChenyx/webpack-for-Novice</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webpack的简易打包教程&quot;&gt;&lt;a href=&quot;#webpack的简易打包教程&quot; class=&quot;headerlink&quot; title=&quot;webpack的简易打包教程&quot;&gt;&lt;/a&gt;webpack的简易打包教程&lt;/h2&gt;&lt;p&gt;不同的js没有经过webpack相关的打包是不识别的；&lt;br&gt;webpack可以对 .js  .png   .css 静态关系进行一个依赖的集合；&lt;br&gt;例如typescript这种在javascript基础上开发的语言使我们能够实现目前版本的javascript不能直接使用的特性，&lt;br&gt;并且之后还能转换为javascript,使得jacascript文件使浏览器可以识别；&lt;br&gt;webpack是模块打包机，分析项目结构，找到找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），&lt;br&gt;并将其转换和打包为合适的格式供浏览器使用。 &lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://sophiechenyx.github.io/blog/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://sophiechenyx.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="https://sophiechenyx.github.io/blog/2018/03/19/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://sophiechenyx.github.io/blog/2018/03/19/前端性能优化/</id>
    <published>2018-03-19T13:28:37.000Z</published>
    <updated>2018-03-23T07:04:53.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-base64-显示图片"><a href="#1-base64-显示图片" class="headerlink" title="1.base64 显示图片"></a>1.base64 显示图片</h3><p>background:url  使用base64 就不用写图的地址，相当于提前将数据解析了，data:image/base64 ，base64的图片是未经压缩的；<br>利于页面直接加载，减少请求；维护不是特别方便；</p><h3 id="2-css3"><a href="#2-css3" class="headerlink" title="2.css3"></a>2.css3</h3><p>webAPP 上基本是0兼容性的；</p><h3 id="3-html5的API完成性能上的提升"><a href="#3-html5的API完成性能上的提升" class="headerlink" title="3.html5的API完成性能上的提升"></a>3.html5的API完成性能上的提升</h3><blockquote><p>QuerySelector  性能更好速度更快；<br>performance.timing :监控页面加载速度；<br>window.localStorage.setItem(‘a’,’1’),window.localStorage.getItem(‘a’,’1’); 类似于mangdb,可以用来做数据的存储；</p></blockquote><h3 id="4-减少页面的重绘和回流"><a href="#4-减少页面的重绘和回流" class="headerlink" title="4.减少页面的重绘和回流"></a>4.减少页面的重绘和回流</h3><p>repaint  reflow (位置的变化)<br>关于dom元素的属性的操作，浏览器的性能没有pc那么强大；移动端减少对dom元素的操作；<br>css3 transform 代替一些dom操作</p><h3 id="5-尽量缓存所有可以缓存的数据；"><a href="#5-尽量缓存所有可以缓存的数据；" class="headerlink" title="5.尽量缓存所有可以缓存的数据；"></a>5.尽量缓存所有可以缓存的数据；</h3><p>pc上面大部分使用的就是http缓存，是利用http协议的 ‘’ reaponse Header’’ 来做一些信息的保存;<br>现在的html5可以使用localStorage来做一些本地的缓存；<br>但是只能存字符串，无法存储对象。可以使用Json.stringify({})，将对象转化为string,再利用JSON.parse()解析；</p><blockquote><p>session 结束会话就没有了；<br>indexedDB 可以存储多一些的数据；</p></blockquote><h2 id="一些非主流的性能优化的方式："><a href="#一些非主流的性能优化的方式：" class="headerlink" title="一些非主流的性能优化的方式："></a>一些非主流的性能优化的方式：</h2><h3 id="6-不给非static-添加动画，会成倍数得消耗性能；"><a href="#6-不给非static-添加动画，会成倍数得消耗性能；" class="headerlink" title="6.不给非static 添加动画，会成倍数得消耗性能；"></a>6.不给非static 添加动画，会成倍数得消耗性能；</h3><h3 id="7-适当的使用硬件加速-GPU图形处理器-canvas画图就是使用了GPU；"><a href="#7-适当的使用硬件加速-GPU图形处理器-canvas画图就是使用了GPU；" class="headerlink" title="7.适当的使用硬件加速(GPU图形处理器),canvas画图就是使用了GPU；"></a>7.适当的使用硬件加速(GPU图形处理器),canvas画图就是使用了GPU；</h3><h3 id="8-给图层一个-transform-translate3d-0-0-0-开启了硬件加速。"><a href="#8-给图层一个-transform-translate3d-0-0-0-开启了硬件加速。" class="headerlink" title="8.给图层一个 transform:translate3d(0,0,0) 开启了硬件加速。"></a>8.给图层一个 transform:translate3d(0,0,0) 开启了硬件加速。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-base64-显示图片&quot;&gt;&lt;a href=&quot;#1-base64-显示图片&quot; class=&quot;headerlink&quot; title=&quot;1.base64 显示图片&quot;&gt;&lt;/a&gt;1.base64 显示图片&lt;/h3&gt;&lt;p&gt;background:url  使用base64 就
      
    
    </summary>
    
      <category term="前端杂货铺" scheme="https://sophiechenyx.github.io/blog/categories/grocery/"/>
    
    
      <category term="前端性能优化" scheme="https://sophiechenyx.github.io/blog/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
